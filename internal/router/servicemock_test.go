// Code generated by mockery v2.52.2. DO NOT EDIT.

package router

import (
	context "context"

	models "github.com/carinfinin/keeper/internal/store/models"
	mock "github.com/stretchr/testify/mock"
)

// MockServiceInterface is an autogenerated mock type for the ServiceInterface type
type MockServiceInterface struct {
	mock.Mock
}

// LastSync provides a mock function with given fields: ctx
func (_m *MockServiceInterface) LastSync(ctx context.Context) (*models.LastSync, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LastSync")
	}

	var r0 *models.LastSync
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.LastSync, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.LastSync); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LastSync)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, u
func (_m *MockServiceInterface) Login(ctx context.Context, u *models.User) (*models.AuthResponse, error) {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.AuthResponse, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.AuthResponse); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: ctx, token
func (_m *MockServiceInterface) Refresh(ctx context.Context, token string) (*models.AuthResponse, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *models.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.AuthResponse, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.AuthResponse); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, u
func (_m *MockServiceInterface) Register(ctx context.Context, u *models.User) (*models.AuthResponse, error) {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.AuthResponse, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.AuthResponse); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveItems provides a mock function with given fields: ctx, items
func (_m *MockServiceInterface) SaveItems(ctx context.Context, items []*models.Item) ([]*models.Item, error) {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for SaveItems")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.Item) ([]*models.Item, error)); ok {
		return rf(ctx, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*models.Item) []*models.Item); ok {
		r0 = rf(ctx, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*models.Item) error); ok {
		r1 = rf(ctx, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockServiceInterface creates a new instance of MockServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceInterface {
	mock := &MockServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
